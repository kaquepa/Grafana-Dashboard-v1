
services:
  # -----------------------------
  # Adminer (interface de DB)
  # -----------------------------
  manager:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
        postgres:
          condition: service_healthy
    networks:
      - monitoring

  # -----------------------------
  # PostgreSQL
  # -----------------------------
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: Postgres_Admin # ${POSTGRES_USER}
      POSTGRES_PASSWORD: secure_password_123 # ${POSTGRES_PASSWORD}
      POSTGRES_DB: Grafana_DB # ${POSTGRES_DB}  # Banco principal da aplica√ß√£o
    volumes:
      #- postgres_data:/var/lib/postgresql/data
      - ./infrastructure/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./infrastructure/02_tables.sql:/docker-entrypoint-initdb.d/02_tables.sql

    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monitoring

  # -----------------------------
  # Grafana
  # -----------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: Grafana_DB  # NOME CORRETO DO BANCO
      GF_DATABASE_USER: Postgres_Admin  # USU√ÅRIO CORRETO DO POSTGRES
      GF_DATABASE_PASSWORD: secure_password_123  # SENHA CORRETA
      GF_DATABASE_SSL_MODE: disable
      GF_SECURITY_ADMIN_USER: Grafana_Admin  # Usu√°rio admin do Grafana
      GF_SECURITY_ADMIN_PASSWORD: secure_password_123  # Senha admin do Grafana
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    #volumes:
    #  - grafana_data:/var/lib/grafana
    networks:
      - monitoring

  # -----------------------------
  # Python App
  # -----------------------------
  python-app:
    build: ./python-app
    container_name: python_app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    #volumes:
    #  - ./python-app:/app
    working_dir: /app
    command: >
      sh -c "echo 'üêç Executando main.py...' &&
             python -u main.py &&
             echo '‚úÖ Execu√ß√£o conclu√≠da com sucesso!' &&
             echo '‚è≥ Mantendo container ativo para debugging...' &&
             tail -f /dev/null"
    restart: unless-stopped
    networks:
      - monitoring

# -----------------------------
# Volumes
# -----------------------------
#volumes:
#  postgres_data:
  grafana_data:

# -----------------------------
# Networks
# -----------------------------
networks:
  monitoring:
    driver: bridge
